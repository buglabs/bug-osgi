/**
 *	Generated by Dragonfly SDK
 *
 */
package com.buglabs.app.bugdash2.servicetracker;

import java.io.IOException;
import java.net.Inet4Address;
import java.net.UnknownHostException;

import lib.Utils;

import org.osgi.framework.BundleContext;
import org.osgi.framework.InvalidSyntaxException;
import org.osgi.service.log.LogService;
import org.osgi.util.tracker.ServiceTracker;

import com.buglabs.app.bugdash2.AdminConfigManager;
import com.buglabs.app.bugdash2.App;
import com.buglabs.app.bugdash2.LogManager;
import com.buglabs.app.bugdash2.ShellManager;
import com.buglabs.app.bugdash2.ShellUtil;
import com.buglabs.app.bugdash2.web.BUGwebAdminBUGnetServlet;
import com.buglabs.app.bugdash2.web.BUGwebAdminHardwareServlet;
import com.buglabs.app.bugdash2.web.BUGwebAdminServlet;
import com.buglabs.app.bugdash2.web.BUGwebAdminSoftwareServlet;
import com.buglabs.app.bugdash2.web.BUGwebAdminSystemServlet;
import com.buglabs.app.bugdash2.web.BUGwebAdminUtilsServlet;
import com.buglabs.app.bugdash2.web.BUGwebFileServlet;
import com.buglabs.application.AbstractServiceTracker;
import com.buglabs.bug.base.pub.IShellService;
import com.buglabs.module.IModuleControl;
import com.buglabs.osgi.sewing.pub.ISewingService;
import com.buglabs.util.ServiceFilterGenerator;

 /**
 *	Service tracker for the BugApp Bundle;
 *
 */
public class BUGwebAdminServiceTracker extends AbstractServiceTracker {	
	private ISewingService 				service;
	private BUGwebAdminServlet 			mainServlet;
	private BUGwebAdminHardwareServlet 	hardwareServlet; 
	private BUGwebAdminSystemServlet 	systemServlet; 
	private BUGwebAdminSoftwareServlet 	softwareServlet; 
	private BUGwebAdminBUGnetServlet 	bugnetServlet; 
	private BUGwebAdminUtilsServlet 	utilsServlet; 
	private BUGwebFileServlet			imageServlet;
	private ServiceTracker 				moduleTracker; 	
	
	public BUGwebAdminServiceTracker(BundleContext context) {
		super(context);
		LogManager.setContext(context);
		ShellManager.setContext(context); 
		AdminConfigManager.setContext(context); 
	}
	
	/**
	 * Determines if the application can start.
	 */
	public boolean canStart() {
		return super.canStart();
	}
	
	/**
	 * If canStart returns true
     * this method is called to start the application.
     * Place your fun logic here. 
	 */
	public void doStart() {
		LogManager.logInfo("BUGwebAdminServiceTracker: start");
		service = (ISewingService) this.getService(ISewingService.class);
		
		mainServlet 		= new BUGwebAdminServlet();
		hardwareServlet 	= new BUGwebAdminHardwareServlet(); 
		systemServlet 		= new BUGwebAdminSystemServlet();
		softwareServlet 	= new BUGwebAdminSoftwareServlet(); 
		bugnetServlet		= new BUGwebAdminBUGnetServlet(); 
		utilsServlet 		= new BUGwebAdminUtilsServlet();
		imageServlet		= new BUGwebFileServlet();

		service.register(context, "/admin", mainServlet);
		service.register(context, "/admin_hardware", hardwareServlet); 
		service.register(context, "/admin_system", systemServlet);
		service.register(context, "/admin_software", softwareServlet);
		service.register(context, "/admin_bugnet", bugnetServlet); 
		service.register(context, "/admin_util", utilsServlet); 
		service.register(context, "/admin_imageviewer", imageServlet);
	
		try {
			moduleTracker = new ServiceTracker(context, 
					ServiceFilterGenerator.generateServiceFilter(
							context, new String[]{IModuleControl.class.getName()}), 
					new BUGwebAdminModuleControlServiceTracker(context));
			moduleTracker.open(); 					
		} catch (InvalidSyntaxException e) {
			//This should not be thrown.
		}
	}

	/**
	 * Called when a service that this application depends is unregistered.
	 */
	public void doStop() {
		LogManager.logInfo("BUGwebAdminServiceTracker: stop");
		service.unregister(mainServlet);
		service.unregister(hardwareServlet); 
		service.unregister(systemServlet);
		service.unregister(softwareServlet);
		service.unregister(bugnetServlet); 
		service.unregister(utilsServlet);
		service.unregister(imageServlet);
		ShellUtil.destroySession(); 
		if (moduleTracker != null)
			moduleTracker.close(); 
	}

	/**
	 * Allows the user to set the service dependencies by
     * adding them to services list returned by getServices().
     * i.e.nl getServices().add(MyService.class.getName());
	 */
	public void initServices() {
		getServices().add(com.buglabs.osgi.sewing.pub.ISewingService.class.getName());
		getServices().add(org.osgi.service.cm.ConfigurationAdmin.class.getName());
		getServices().add(IShellService.class.getName());
		getServices().add(com.buglabs.app.bugdash2.IBatteryInfoProvider.class.getName());
		getServices().add(LogService.class.getName());
	}
	
	public static boolean checkNetworkConnection() {
		boolean _connected = false; 
		try {
			// check bugcommunity.com: change this later..
			_connected = Utils.checkInternetConnection(Inet4Address.getByName(App.COMMUNITY_URL), 80, 3000); 
		} catch (UnknownHostException e) {
			LogManager.logDebug(e.getMessage());
		} catch (IOException e) {
			LogManager.logDebug(e.getMessage());
		} catch (Exception e) {
			LogManager.logDebug(e.getMessage());
		}
		return _connected; 
	}	
}

