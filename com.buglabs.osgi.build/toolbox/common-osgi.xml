<?xml version="1.0"?>
<project name="common-osgi" default="build.jars" basedir="." xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
	<fail unless="checkout.dir"      message="Ant variable checkout.dir must be defined."/>
	<fail unless="base.build.dir"    message="Ant variable base.build.dir must be defined."/>
	<fail unless="externalDirectory" message="Ant variable externalDirectory must be defined."/>
	<fail unless="distDirectory"     message="Ant variable distDirectory must be defined."/>
	
	<property name="buildDirectory" location="${checkout.dir}/${ant.project.name}" />
	<property environment="env"/>
	<tstamp/>
	
	<!-- Import Checkstyle -->
	<taskdef resource="checkstyletask.properties"
			         classpath="${base.build.dir}/toolbox/checkstyle/checkstyle-5.3-all.jar"/>

	<!-- PROJECT CLASSPATH -->
	<path id="bin.classpath">
		<fileset dir="${externalDirectory}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${distDirectory}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- COMPILER SETTINGS -->
	<property name="javacFailOnError" value="true" />
	<property name="javacDebugInfo" value="on" />
	<property name="javacVerbose" value="true" />
	<property name="logExtension" value=".log" />
	<property name="compilerArg" value="" />
	<property name="javacSource" value="1.6" />
	<property name="javacTarget" value="1.6" />
	<path id="path_bootclasspath">
		<fileset dir="${java.home}/lib">
			<include name="*.jar" />
		</fileset>
	</path>
	<property name="bootclasspath" refid="path_bootclasspath" />
	<property name="bundleJavacSource" value="${javacSource}" />
	<property name="bundleJavacTarget" value="${javacTarget}" />
	<property name="bundleBootClasspath" value="${bootclasspath}" />
	
	<!-- target: build	  Compile the source code -->
	<target name="build" description="BUILDING: ${ant.project.name}">
		<echo message="## PROJECT: ${ant.project.name} ## TARGET: build" />
		
		<fail unless="package.version" message="package.version must be defined."/>
		<fail unless="env.BUILD_NUMBER" message="env.BUILD_NUMBER must be defined."/>
			
		<property name="full.version" value="${package.version}.${env.BUILD_NUMBER}"></property>
		
		<javac destdir="${buildDirectory}" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bundleBootClasspath}" srcdir=".">
			<compilerarg line="${compilerArg}" compiler="${build.compiler}" />
			<classpath refid="bin.classpath" />
		</javac>
		<manifest file="META-INF/MANIFEST.MF" mode="update">
			<attribute name="Bundle-Version" value="${full.version}" />
			<attribute name="Build-Label" value="${env.JOB_NAME}" />
			<attribute name="Build-Source" value="${env.BUILD_URL}" />
			<attribute name="Build-Date" value="${TODAY}" />
		</manifest>
	</target>

	<!-- target: build.jars   Build jars intended for production distribution -->
	<target name="build.jars" depends="build, document" description="make the jar">
		<echo message="## PROJECT: ${ant.project.name} ## TARGET: build.jars" />
		<fail unless="distDirectory" message="distDirectory must be defined."/>
		<fail unless="buildDirectory" message="buildDirectory must be defined."/>
		
		<jar destfile="${distDirectory}/${ant.project.name}.jar" 
			 basedir="${buildDirectory}" 
		     manifest="META-INF/MANIFEST.MF"
			 excludes="build/**,**/.settings/**,**/build.xml/**,**/build.properties/**,**/.classpath,**/.project,src/**,test/**,junit-reports/**,.git/**,**.gitignore,**/.checkstyle,**/README.*,**/build*.sh,checkstyle-reports/**"/>
	</target>
	
	<!-- target: build.src.jars   Build jars with source code -->
	<target name="build.src.jars" depends="build, document" description="make the jar">
		<echo message="## PROJECT: ${ant.project.name} ## TARGET: build.src.jars" />
		
		<jar destfile="${distDirectory}/${ant.project.name}.jar" 
			 basedir="${buildDirectory}" 
		     manifest="META-INF/MANIFEST.MF"
			 excludes="build/**,**/.settings/**,**/build.xml/**,**/build.properties/**,test/**,junit-reports/**,.git/**,**.gitignore"/>
	</target>

	<!-- target: doc.build.jars   Generate javadocs after building and jaring -->
	<target name="doc.build.jars" description="javadoc and make the jar">
		<echo message="## PROJECT: ${ant.project.name} ## TARGET: doc.build.jars" />
		
		<property name="generate.docs" value="true" />
		<antcall target="build.jars" />
	</target>

	<target name="document" if="generate.docs">
		<echo message="## PROJECT: ${ant.project.name} ## TARGET: document" />
		<javadoc destdir="${buildDirectory}/docs">
			<fileset dir=".">
				<include name="**/*.java" />
			</fileset>
		</javadoc>
	</target>

	<!-- target: test   Run JUnit tests -->
	<target name="test" depends="create_dirs, build.jars">
		<echo message="## PROJECT: ${ant.project.name} ## TARGET: test" />
		<junit printsummary="yes">
			<classpath refid="bin.classpath" />
			<formatter type="xml"/>
			<batchtest todir="${report.dir}">
				<fileset dir="${report.src}">
					<include name="**/*Test*.java" />
					<exclude name="**/*OSGiTest*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<!-- target: test-osgi   Run tests within an OSGi framework -->
	<target name="test-osgi" depends="test">
		<echo message="## PROJECT: ${ant.project.name} ## TARGET: test.osgi" />
		
		<echo message="Creating OSGi instance with following bundles: ${testBundles}"></echo>
		<property name="osgi.framework.jar" location="${distDirectory}/felix.jar" />
		<java jar="${osgi.framework.jar}" newenvironment="true" fork="true">
			<jvmarg value="-Dorg.osgi.framework.storage=/tmp/felix-cache"/>
			<jvmarg value="-Dorg.osgi.framework.storage.clean=onFirstInit"/>
			<jvmarg value="-Dfelix.auto.deploy.dir=${distDirectory}"/>
			<jvmarg value="-Dfelix.auto.start.1=${testBundles}"/>
			<jvmarg value="-Dcom.buglabs.osgi.tester.report.dir=${report.dir}"/>
		</java>
	</target>
	
	<!-- target: checkstyle   Run the checkstyle validator against sources -->
	<target name="checkstyle" depends="create_dirs">		
		<echo message="## PROJECT: ${ant.project.name} ## TARGET: checkstyle" />
		<echo message="Running checkstyle template: ${checkstyle.config} for sources in ${checkstyle.src} and outputing to ${checkstyle.dir}/checkstyle_errors.xml"></echo>
		<checkstyle config="${checkstyle.config}">
			<fileset dir="${checkstyle.src}" includes="**/*.java"/>
			<formatter type="xml" toFile="${checkstyle.dir}/checkstyle_errors.xml"/>
		</checkstyle>
	</target>

	<target name="create_dirs">
		<echo message="## PROJECT: ${ant.project.name} ## TARGET: create_dirs" />
		<mkdir dir="${buildDirectory}" />
		<mkdir dir="${checkstyle.dir}" />
		<mkdir dir="${report.dir}" />
	</target>

	<target name="clean">
		<echo message="## PROJECT: ${ant.project.name} ## TARGET: clean" />
		<delete dir="${report.dir}" />
		<delete dir="${buildDirectory}" />
		<delete dir="${checkstyle.dir}" />
	</target>
</project>