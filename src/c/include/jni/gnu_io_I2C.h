/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class gnu_io_I2C */

#ifndef _Included_gnu_io_I2C
#define _Included_gnu_io_I2C
#ifdef __cplusplus
extern "C" {
#endif
#undef gnu_io_I2C_debug
#define gnu_io_I2C_debug 0L
#undef gnu_io_I2C_DATABITS_5
#define gnu_io_I2C_DATABITS_5 5L
#undef gnu_io_I2C_DATABITS_6
#define gnu_io_I2C_DATABITS_6 6L
#undef gnu_io_I2C_DATABITS_7
#define gnu_io_I2C_DATABITS_7 7L
#undef gnu_io_I2C_DATABITS_8
#define gnu_io_I2C_DATABITS_8 8L
#undef gnu_io_I2C_PARITY_NONE
#define gnu_io_I2C_PARITY_NONE 0L
#undef gnu_io_I2C_PARITY_ODD
#define gnu_io_I2C_PARITY_ODD 1L
#undef gnu_io_I2C_PARITY_EVEN
#define gnu_io_I2C_PARITY_EVEN 2L
#undef gnu_io_I2C_PARITY_MARK
#define gnu_io_I2C_PARITY_MARK 3L
#undef gnu_io_I2C_PARITY_SPACE
#define gnu_io_I2C_PARITY_SPACE 4L
#undef gnu_io_I2C_STOPBITS_1
#define gnu_io_I2C_STOPBITS_1 1L
#undef gnu_io_I2C_STOPBITS_1_5
#define gnu_io_I2C_STOPBITS_1_5 0L
#undef gnu_io_I2C_STOPBITS_2
#define gnu_io_I2C_STOPBITS_2 2L
#undef gnu_io_I2C_FLOWCONTROL_NONE
#define gnu_io_I2C_FLOWCONTROL_NONE 0L
#undef gnu_io_I2C_FLOWCONTROL_RTSCTS_IN
#define gnu_io_I2C_FLOWCONTROL_RTSCTS_IN 1L
#undef gnu_io_I2C_FLOWCONTROL_RTSCTS_OUT
#define gnu_io_I2C_FLOWCONTROL_RTSCTS_OUT 2L
#undef gnu_io_I2C_FLOWCONTROL_XONXOFF_IN
#define gnu_io_I2C_FLOWCONTROL_XONXOFF_IN 4L
#undef gnu_io_I2C_FLOWCONTROL_XONXOFF_OUT
#define gnu_io_I2C_FLOWCONTROL_XONXOFF_OUT 8L
/*
 * Class:     gnu_io_I2C
 * Method:    Initialize
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_gnu_io_I2C_Initialize
  (JNIEnv *, jclass);

/*
 * Class:     gnu_io_I2C
 * Method:    open
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_gnu_io_I2C_open
  (JNIEnv *, jobject, jstring);

/*
 * Class:     gnu_io_I2C
 * Method:    nativeSetI2CPortParams
 * Signature: (IIII)V
 */
JNIEXPORT void JNICALL Java_gnu_io_I2C_nativeSetI2CPortParams
  (JNIEnv *, jobject, jint, jint, jint, jint);

/*
 * Class:     gnu_io_I2C
 * Method:    setflowcontrol
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_gnu_io_I2C_setflowcontrol
  (JNIEnv *, jobject, jint);

/*
 * Class:     gnu_io_I2C
 * Method:    NativegetReceiveTimeout
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_gnu_io_I2C_NativegetReceiveTimeout
  (JNIEnv *, jobject);

/*
 * Class:     gnu_io_I2C
 * Method:    NativeisReceiveTimeoutEnabled
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_gnu_io_I2C_NativeisReceiveTimeoutEnabled
  (JNIEnv *, jobject);

/*
 * Class:     gnu_io_I2C
 * Method:    NativeEnableReceiveTimeoutThreshold
 * Signature: (III)V
 */
JNIEXPORT void JNICALL Java_gnu_io_I2C_NativeEnableReceiveTimeoutThreshold
  (JNIEnv *, jobject, jint, jint, jint);

/*
 * Class:     gnu_io_I2C
 * Method:    isDTR
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_gnu_io_I2C_isDTR
  (JNIEnv *, jobject);

/*
 * Class:     gnu_io_I2C
 * Method:    setDTR
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_gnu_io_I2C_setDTR
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     gnu_io_I2C
 * Method:    setRTS
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_gnu_io_I2C_setRTS
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     gnu_io_I2C
 * Method:    setDSR
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_gnu_io_I2C_setDSR
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     gnu_io_I2C
 * Method:    isCTS
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_gnu_io_I2C_isCTS
  (JNIEnv *, jobject);

/*
 * Class:     gnu_io_I2C
 * Method:    isDSR
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_gnu_io_I2C_isDSR
  (JNIEnv *, jobject);

/*
 * Class:     gnu_io_I2C
 * Method:    isCD
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_gnu_io_I2C_isCD
  (JNIEnv *, jobject);

/*
 * Class:     gnu_io_I2C
 * Method:    isRI
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_gnu_io_I2C_isRI
  (JNIEnv *, jobject);

/*
 * Class:     gnu_io_I2C
 * Method:    isRTS
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_gnu_io_I2C_isRTS
  (JNIEnv *, jobject);

/*
 * Class:     gnu_io_I2C
 * Method:    sendBreak
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_gnu_io_I2C_sendBreak
  (JNIEnv *, jobject, jint);

/*
 * Class:     gnu_io_I2C
 * Method:    writeByte
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_gnu_io_I2C_writeByte
  (JNIEnv *, jobject, jint);

/*
 * Class:     gnu_io_I2C
 * Method:    writeArray
 * Signature: ([BII)V
 */
JNIEXPORT void JNICALL Java_gnu_io_I2C_writeArray
  (JNIEnv *, jobject, jbyteArray, jint, jint);

/*
 * Class:     gnu_io_I2C
 * Method:    drain
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_gnu_io_I2C_drain
  (JNIEnv *, jobject);

/*
 * Class:     gnu_io_I2C
 * Method:    nativeavailable
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_gnu_io_I2C_nativeavailable
  (JNIEnv *, jobject);

/*
 * Class:     gnu_io_I2C
 * Method:    readByte
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_gnu_io_I2C_readByte
  (JNIEnv *, jobject);

/*
 * Class:     gnu_io_I2C
 * Method:    readArray
 * Signature: ([BII)I
 */
JNIEXPORT jint JNICALL Java_gnu_io_I2C_readArray
  (JNIEnv *, jobject, jbyteArray, jint, jint);

/*
 * Class:     gnu_io_I2C
 * Method:    eventLoop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_gnu_io_I2C_eventLoop
  (JNIEnv *, jobject);

/*
 * Class:     gnu_io_I2C
 * Method:    nativeClose
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_gnu_io_I2C_nativeClose
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
